apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: otre-files-config
  namespace: monitoring
data:
  nginx.conf: |-
    worker_processes 1;

    pcre_jit on;

    include /etc/nginx/modules/*.conf;
    load_module /usr/local/openresty/nginx/modules/ngx_http_opentracing_module.so;

    worker_rlimit_nofile 32768;

    events {
        worker_connections 4096;
        multi_accept       on;
        use                epoll;
    }

    env VERSION;

    http {
        include /usr/local/openresty/nginx/conf/mime.types;
        default_type application/octet-stream;

        server_tokens off;

        keepalive_timeout 65;

        aio threads;
        directio 100k;
        output_buffers 2 1M;

        sendfile on;
        sendfile_max_chunk 512k;

        tcp_nodelay on;
        tcp_nopush on;

        gzip on;
        gzip_comp_level 5;
        gzip_min_length 100;
        gzip_http_version 1.1;
        gzip_buffers 16 8k;
        gzip_proxied any;
        gzip_types
            text/plain
            text/css
            text/js
            text/xml
            text/javascript
            application/javascript
            application/x-javascript
            application/json
            application/xml
            application/rss+xml
            image/svg+xml;

        log_format main
            '$time_date_time.$time_millis$time_zone $remote_addr $realip_remote_addr $req_id $request_method $best_http_host$request_uri $server_protocol $status $bytes_sent $request_time "$http_referer" "$http_user_agent" $proxy_upstream_name $upstream_response_time $upstream_status';

        access_log /dev/stdout main;
        error_log /dev/stdout warn;

        map $msec $time_millis {
           ~[0-9]+\.(?P<millis>[0-9][0-9][0-9]) $millis;
        }

        map $time_iso8601 $time_date_time {
          "~^(?<datetime>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})"   $datetime;
        }

        map $time_iso8601 $time_zone {
          "~^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?<zone>.*)$"    $zone;
        }

        # Retain the default nginx handling of requests without a "Connection" header
        map $http_upgrade $connection_upgrade {
            default upgrade;
            ''      close;
        }

        # trust http_x_forwarded_proto headers correctly indicate ssl offloading
        map $http_x_forwarded_proto $pass_access_scheme {
            default $http_x_forwarded_proto;
            ''      $scheme;
        }

        map $http_x_forwarded_port $pass_server_port {
            default $http_x_forwarded_port;
            ''      $server_port;
        }

        map $pass_server_port $pass_port {
            443              443;
            default          $pass_server_port;
        }

        # Obtain best http host
        map $http_host $this_host {
            default          $http_host;
            ''               $host;
        }

        map $http_x_forwarded_host $best_http_host {
            default          $http_x_forwarded_host;
            ''               $this_host;
        }

        # Reverse proxies can detect if a client provides a X-Request-ID header, and pass it on to the backend server.
        # If no such header is provided, it can provide a random value.
        map $http_x_request_id $req_id {
            default   $http_x_request_id;
            ""        $request_id;
        }

        lua_package_path "/etc/nginx/lua/?.lua;/etc/nginx/lua/vendor/?.lua;/usr/local/lib/lua/?.lua;/usr/local/openresty/site/lualib/?.lua;;";
        lua_package_cpath "/usr/local/openresty/lualib/?.so;/usr/local/lib/lua/?.so;/usr/lib/lua-platform-path/lua/5.1/?.so;;";

        include /etc/nginx/conf.d/*.conf;
    }

  backend.conf: |-
    server {
      listen 9411;

      set $backend_otre 127.0.0.1:9410;

      location / {
        set $proxy_upstream_name otre;
        proxy_pass http://$backend_otre;
      }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: policy-rego
  namespace: monitoring
data:
  policy.rego: |
    package otre

    default url = ""
    default status = 0

    ping[span] {
      span := input[_]
      url :=  input[_].binaryAnnotations["http.url"]
      endswith(url, "/ping")
    }

    api_new_service[span] {
      span := input[_]
      url :=  input[_].binaryAnnotations["http.url"]
      contains(url, "/api/newService")
    }

    error_response[span] {
      span := input[_]
      status := to_number(span.binaryAnnotations["http.status_code"])
      status >= 500
    }

    response = {"sampleRate": 0, "reason": msg} {
      some span
      ping[span]
      msg := "URL ending /ping is a ping URL"
    } else = {"sampleRate": 100, "reason": msg} {
      some span
      api_new_service[span]
      msg := "URL is for the new service with 100% sampling"
    } else = {"sampleRate": 100, "reason": msg} {
      some span
      error_response[span]
      msg := "Status code >= 500"
    }  else = {"sampleRate": 25, "reason": "fallback sample rate"} {
      true
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otre
  namespace: monitoring
  labels:
    app: otre
spec:
  selector:
    matchLabels:
      app: otre
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: otre
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10010"
    spec:
        containers:
          - image: willthames/otre:v0.2-17-g9bd7ef6
            name: otre
            command:
              - /go/bin/otre
            args:
              - --port
              - "9410"
              - --policy-file
              - /otre/policy.rego
              - --flush-age
              - "20000"
              - --log-level
              - Trace
              - --collector-url
              - http://zipkin:9411
            volumeMounts:
              - name: policy-rego
                mountPath: /otre
          - name: nginx-sidecar
            command:
              - nginx
              - -c
              - /etc/nginx/nginx.conf
              - -g
              - daemon off;
            image: quay.io/kubernetes-ingress-controller/nginx:0.92
            imagePullPolicy: Always
            readinessProbe:
              tcpSocket:
                port: 9411
              initialDelaySeconds: 5
              periodSeconds: 5
            volumeMounts:
              - name: otre-files-config
                mountPath: /etc/nginx/conf.d/backend.conf
                subPath: backend.conf
              - name: otre-files-config
                mountPath: /etc/nginx/nginx.conf
                subPath: nginx.conf
        volumes:
          - name: otre-files-config
            configMap:
              name: otre-files-config
          - name: policy-rego
            configMap:
              name: policy-rego
---
apiVersion: v1
kind: Service
metadata:
  name: otre
  namespace: monitoring
  labels:
    app: otre
spec:
  ports:
    - name: otre
      port: 9411
      protocol: TCP
      targetPort: 9411
    - name: otre-udp
      port: 9412
      protocol: UDP
      targetPort: 9410
  selector:
    app: otre
  type: NodePort
